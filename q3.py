# -*- coding: utf-8 -*-
"""Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nxVoe87QpanukbM0m1U2UBGnMCNTzNu1
"""



'''

'''
from ultralytics import YOLO
from PIL import Image
import pandas as pd
import os
import time
import math
import time



#Setting up yolo model and analysing all images
model=YOLO("yolov8m.pt")
results=model.predict("/content/drive/MyDrive/Aithon/All_Images")

#A function to quantitatively evaluate the interestingness score of an entity
def CDA(box):
  global result

  #Calculating coordinates of entity
  cords=box.xyxy[0].tolist()
  cords=[round(x) for x in cords]

  #Probability of correct entity detection
  conf=round(box.conf[0].item(),2)

  #Calculating d, the radial distance of the entity's centre from the image centre. D gives us this value normalized, as a value from 0 to 100
  Y,X=result.orig_shape
  x0,y0=abs(cords[2]-cords[0]),abs(cords[3]-cords[1])
  d=(((X-x0)/2)**2)+(((Y-y0)/2)**2)
  D=100*math.exp(-d)

  #A is the fraction of area covered by the entity, normalized as a value from 0 to 100
  AwoP=x0*y0
  A=100*(AwoP/(X*Y))

  #'AD' score; evaluates appropriately based on values of A and D
  AD=50*math.sin((A+D)/20)

  #Returning the 'interestingness score'.
  return 200*conf+AD


#Creating a dataframe with image number as the columns, and object type as the indices.
'''While debugging, this part was the most irksome to check. If an image got sorted in a less appropriate folder, finding the interestingness scores of the object types in the image was a hassle to find.
'''
data=[[[] for _ in range(0,len(results))] for __ in range(0,len(results[0].names))]
df=pd.DataFrame(data)
for i in range(0,len(results)):
  result=results[i]

  for box in result.boxes:

    #Evaluating the interestingness score for each entity in the image, and append this value to the appropriate object type
    intrs=CDA(box)
    df.iat[int(box.cls[0].item()),i].append(intrs)

  for j in range(0,len(results[0].names)):
    if not sum(df.iloc[j,i])==0:
      #Evaluates the max+1.5avg of the interestingness score of each object type. This value can vary anywhere between 0 and 625.
      '''The final function was so difficult to find; it was done entirely by trial and error. Still, even with all this testing, the interestingness score is far from perfect, but works well enough.
      '''
      df.iloc[j,i]=float(max(df.iloc[j,i]))+float(1.5*sum(df.iloc[j,i])/(len(df.iloc[j,i])))
    else:
      #Set interestingness score to 0 if object does not exist
      df.iloc[j,i]=float(0)

  #Converting to numeric for evaluation of max interestingness score.
  df[i]=pd.to_numeric(df[i])

  #Create/use directory to finally sort images into, based on the highest interestingness score of an object type.
  M=result.names[df[i].argmax()]
  if not os.path.exists(f"/content/drive/MyDrive/Aithon/{M}"):
    os.makedirs(f"/content/drive/MyDrive/Aithon/{M}")
  im=Image.open(f"{result.path}")
  im.save(f"/content/drive/MyDrive/Aithon/{M}/{M}_{result.path[41:]}")

with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also
    print(df)



'''
Over here we setting up the model variable which will be using the YOLO module
'results' acts as an inference of the model which is trained on the yolov8m.pt dataset
'''
model=YOLO("yolov8m.pt")

results=model.predict("/content/drive/MyDrive/Aithon/All_Images",conf=0.6)
print(len(results))

for i in range(0,len(results)):
  result=results[i]

  print(f"{i}th Image:")
  print(len(result.boxes))

  for box in result.boxes:
    class_id=result.names[box.cls[0].item()]
    cords=box.xyxy[0].tolist()
    cords=[round(x) for x in cords]
    conf=round(box.conf[0].item(), 2)
    print("Object type:", class_id)
    print("Coordinates:", cords)
    print("Probability:", conf)
    print("---\n")

from ultralytics import YOLO
from PIL import Image
import numpy as np
import pandas as pd
import os
import time

'''
Over here we setting up the model variable which will be using the YOLO module
'results' acts as an inference of the model which is trained on the yolov8m.pt dataset
'''
model=YOLO("yolov8m.pt")

def CDA(box):
  global result

  #Calculating coordinates of entity
  cords=box.xyxy[0].tolist()
  cords=[round(x) for x in cords]

  #Probability of correct entity detection
  conf=round(box.conf[0].item(),2)

  #Calculating d, the radial distance of the entity's centre from the image centre. D gives us this value normalized, as a value from 0 to 1
  Y,X=result.orig_shape
  x0,y0=abs(cords[2]-cords[0]),abs(cords[3]-cords[1])
  d=(((X-x0)/2)**2)+(((Y-y0)/2)**2)
  D=100*math.exp(-d)

  #Area covered by the entity
  AwoP=x0*y0
  A=100*(AwoP/(X*Y))

  #AD=100*(100/(A/5+D)+50/(50-A/5-D))**(-1)
  AD=50*math.sin((A+D)/20)

  #Returning metric to base sorting algorithm on
  return 200*conf+AD

results=model.predict("/content/drive/MyDrive/Aithon/All_Images")
print(len(results))

for i in range(0,len(results)):
  result=results[i]

  print(f"{i}th Image:")
  print(len(result.boxes))

  for box in result.boxes:
    class_id=result.names[box.cls[0].item()]
    cords=box.xyxy[0].tolist()
    cords=[round(x) for x in cords]
    conf=round(box.conf[0].item(), 2)
    print("Object type:", class_id)
    print("Coordinates:", cords)
    print("Probability:", conf)
    print("Interestingness score:",CDA(box))
    print("---\n")